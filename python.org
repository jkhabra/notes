* Templating
** Jinja2
- What is Jinja2?
  - Jinja2 is a modern and designer-friendly templating language (library) for Python, modelled after Django’s templates
  - It is fast, widely used and secure with the optional sandboxed template execution environment
  - *Features*
    - Sandboxed execution
    - Powerful automatic HTML escaping system for XSS prevention
    - Template inheritance
    - Compiles down to the optimal python code just in time
    - Optional ahead-of-time template compilation
    - Easy to debug, line numbers of exceptions directly point to the correct line in the template
    - Configurable syntax

*** Converting Template to HTML
 - The most basic way to create a template and render it is through Template
   e.g
   #+BEGIN_SRC python
   from jinja2 import Template
   template = Template('Hello {{ name }}!')
   template.render(name='John Doe')
   # 'Hello John Doe!'
   #+END_SRC
 - Creating an instance of Template we get back a new template object that provides a method called render()
 - render is called with a dict or keyword arguments expands the template
 - Dict or keywords arguments passed to the template are the called “context” of the template

*** Syntax for Writing Templates
- The default Jinja delimiters are:
  - ~{% ... %}~ for Statements
  - ~{{ ... }}~ for Expressions to print to the template output
  - ~{# ... #}~ for Comments not included in the template output
  - ~#  ... ##~ for Line Statements

**** Variables
- Template variables are defined by the context of dictionary that passes to the template
- Variables may have attributes or elements on them we can access too
- Attributes a variable has depends on the application providing that variable
- Dot (.) to access attributes of a variable
  - Or access attribute in the standard Python __getitem__ “subscript” syntax ([])
      e.g
      #+BEGIN_SRC python
      {{ foo.bar }}
      {{ foo['bar'] }}
      #+END_SRC
  - The outer double-curly braces are not part of the variable, but the print statement
  - If you access variables inside tags don’t put the braces around them

**** Filters
  - Variables can be modified by filters
  - Filters are separated from the variable by a pipe symbol (|) and have optional argument
  - Multiple filters can be chained
  - The output of one filter is applied to the next
    e.g
    #+BEGIN_EXAMPLE
    {{ name | striptags | title }}
    # output (title(striptags(name))) #
    #+END_EXAMPLE
  - It will remove all HTML Tags from variable name and title

**** Tests
- Tests can be used to test variable against the common expression
- To test the variable or expression use ~is~ then variable and after variable name of the test
- Tests can take parameters too if there is only one argument then leave the parameter
  e.g
  #+BEGIN_SRC python
  {% if loop.index is divisibleby (3) %}
  #+END_SRC
- List of some built-in Tests
  - callable(objects)
    - It returns if the object is callable or not (i.e., some kind of function)
    - Classes and instance are callable with a __call__() method

  - define(value)
    - It returns true if value is defined
      e.g
      #+BEGIN_SRC jinja
      {% if variable is define %}
         vlaue of variable: {{variable}}
      {% else %}
         variable is not deifined
      {% endif %}
      #+END_SRC
  - divisibleby(value, num)
    - It checks the variable is divisible by number

  - equalto(value, other)
    - It checks if an objects has the same value as the other object
      e.g
      #+BEGIN_SRC jinja
      {%  if foo.expression is equalto 42 %}
          the foo attribute evaluates to the constant 42
      {% endif %}
      #+END_SRC
    - This appears to be a useless test as it does exactly the same as the == operator
      - But it can be useful when used together with the selectattr function:

**** Whitespace Control
- Jinja can trim_blocks, the first newline after template tag is removed automatically
- But we can do that manually disable the lstrip_block behavior by potting plus sign (+) at the start of a block
  #+BEGIN_SRC html
  <div>
      {%+ if something %}yay{% endif %}
  <div>
  #+END_SRC
- Or we can trip whitespace in templates by hand
  - If add a minus sign (-) to the start or end of a block
    #+BEGIN_SRC python
    {% for item in seq -%}
        {{ item }}
    {%- endfor %} # no whitespace adds between the tag and the minus sign #
    #+END_SRC
  - This will yield all elements without whitespace between them
  - If Line Statements are enabled, they strip leading whitespace automatically
  - By default, Jinja2 also removes trailing newline
    - If want to keep single trailing newline configure Jinja to keep_trailing_newline

**** Line Statements
- Line Statements are  multi line comments
- The line statement prefix can appear anywhere on the line long as long as no text precedes it
- For better readability, line statements starts a block (such as for, if, elif soon) ends with a colon:
- If line-comment prefix is configured to be #, everything from # to end of the line is ignored
  e.g
  #+BEGIN_SRC python
  <ul>
  # for item in seq:
     <li> {{item }} </li>
  # enfor
  </ul>
  #+END_SRC

**** Templates Inheritance
- Templates inheritance allows us to built a base 'skeleton' template
  - That contain all the common elements of our site and defines block that child templates can override

***** Base Template
- This is simple HTML skeleton document
- Its job of 'child' templates to fill the empty blocks whit content
 e.g
 #+BEGIN_SRC html
 <!DOCTYPE html>
 <html lang="en">
 <head>
        {% block head %}
       <link rel="stylesheet" href="syle.css" />
       <title>{% block title %}{% endblock %} - My Webpage</title>
       {% endblock %}
</head>
<body>
    <div id="content">{% block content %}{% endblock %}</div>
    <div id="footer">
        {% block footer %}
        &copy; Copyright 2008 by <a href="http://domain.invalid/">you</a>.
        {% endblock %}
    </div>
</body>
</html>
 #+END_SRC
- The {% block %} tags define four blocks that child templates can fill in
- All bock tag tells to template engine that child template override those placeholders in the template

***** Child Template
e.g
#+BEGIN_SRC html
{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}
{% block content %}
    <h1>Index</h1>
    <p class="important">
      Welcome to my awesome homepage.
    </p>
{% endblock %}
#+END_SRC
- The {% extends %} tag tells the template engine that this template 'extends' another template
- When the template system evaluates template, it first locate the parent
- The filename of template depends on the template loader
  - For example, the FileSystemLoader allows you to access other templates by giving the filename
  - You can access templates in subdirectories with a slash
- We can’t define multiple {% block %} tags with the same name in the same template
- This limitation exists because a block tag works in “both” directions
- If you want to use a block multiple times, then use the special self variable and call the block with that name
  e.g
  #+BEGIN_SRC html
  <title>{% block title %}{% endblock %}</title>
  <h1>{{ self.title() }}</h1>
  {% block body %}{% endblock %}
  #+END_SRC
  - *Super Block*
    - Calling super, this gives back the content of the parent block
      e.g
      #+BEGIN_SRC html
      {% block sidebar %}
          <h3>Table Of Contents</h3>
          ...
          {{ super() }}
      {% endblock %}
      #+END_SRC
  - Named Block End-Tags
    - Jinja2 allows to put name of the block after the end tag for better readability
    - The name after the endblock must match the bock name
      e.g
      #+BEGIN_SRC html
      {% block sidebar %}
         {% block inner_sidebar %}
            ...
         {% endblock inner_sidebar %}
      {% endblock sidebar %}
      #+END_SRC

**** List of Control Structures
- A control structure refers to those things that control the flow of a program conditionals
- Such as if/elif/else, for loops
- Its default syntax, control structure appear inside {% ... %} blocks
***** For loop
 - What for loop does is it loop over each item in a sequence
 - As variables in templates continue their object properties
   - It is possible to iterate over containers like dict
     e.g
     #+BEGIN_SRC html
     <dl>
     {% for key, value in my_dict.iteritems() %}
         <dt>{{ key|e }}</dt>
         <dd>{{ value|e }}</dd>
    {% endfor %}
    </dl>
     #+END_SRC
   - Python dicts are not ordered; so you might want to either pass a sorted list of tuple
     - Or a collections.OrderedDict – to the template, or use the dictsort filter

******  Some special variables for for loop:
 - *loop.index*: The current iteration of the loop.(1 indexed)
 - *loop.index0*: The current iteration of the loop.(0 indexed)
 - *loop.revindex*: The number of iteration from the end of loop (1 indexed)
 - *loop.revindex0*: The number of iteration from the end of loop (0 indexed)
 - *loop.first*: True if first iteration
 - *loop.last*: True if last iteration
 - *loop.length* The number of items in sequence
 - *loop.cycle*: A helper function to cycle between a list of sequences
   - With the help of loop.cycle each we can loop on string/variable at same time
     e.g
     #+BEGIN_SRC jinja
     {% for row in rows %]
       <li class ="{{ loop.cycle('odd', 'even') }}">{{ row }}</li>
     {% endfor %}
     #+END_SRC
 - *loop.depth*: Indicates how deep in a recursive loop the rendering currently is. Start at level 1
 - *loop.depth0*: Indicates how deep in a recursive loop the rendering currently is.Start at level 0
 - Unlike in Python, it’s not possible to break or continue in a loop
   - We can, filter the sequence during iteration, which allows you to skip items
     e.g
     #+BEGIN_SRC html
     {% for user in users if not user.hidden %}
        <li>{{ user.username|e }}</li>
     {% endfor %}
     #+END_SRC
 - If no iteration took place because the sequence was empty or the filtering removed all the items from the sequence
   - we can render a default block by using else
     e.g
     #+BEGIN_SRC html
     <ul>
     {% for user in users %}
        <li>{{ user.username|e }}</li>
     {% else %}
        <li><em>no users found</em></li>
     {% endfor %}
     </ul>
     #+END_SRC
 - It is also possible to use loops recursively
 - To use loops recursively, have to add the recursive modifier to the loop definition
   - Call the loop variable with the new iterable where you want to recurse
     e.g
     #+BEGIN_SRC html
     <ul class="sitemap">
     {%- for item in sitemap recursive %}
         <li><a href="{{ item.href|e }}">{{ item.title }}</a>
         {%- if item.children -%}
            <ul class="submenu">{{ loop(item.children) }}</ul>
         {%- endif %}</li>
    {%- endfor %}
</ul>
     #+END_SRC
   - The loop variable always refers to the closest (innermost) loop
   - If we want more than one level of loop
     - we can rebind the variable loop by writing {% set outer_loop = loop %} after the loop that we want to use recursively
       - Then, we can call it using {{ outer_loop(...) }}

***** if
- The if statement in Jinja is comparable with the Python if statement
- In the other words, you can use it to test if a variable is defined, not empty and not false
  e.g
  #+BEGIN_SRC python
  {% if kenny.sick %}
    Kenny is sick.
  {% elif kenny.dead %}
    You killed Kenny!  You bastard!!!
  {% else %}
    Kenny looks okay --- so far
  {% endif %}
  #+END_SRC
