* How to make site responsive with grid layout
source: https://www.quackit.com/css/grid/tutorial/

** What is grid layout
 - Grid layout is a layout model optimized for two dimensional layouts
 - It is best for image galleries, forms and anything that requires its own place
 - Grid is an set of horizontal and vertical lines which creates a sizing
   positioning coordinate for the grid container's content
** How grid works
 - Creating grid is simple we just need to set =display= element to =grid=
 - =display: grid= turns the element into a grid container
 - This automatically makes all of that element's to grid items
 - Usually the first step is defining how many rows and columns grid has (it is optional)
   e.g
   #+BEGIN_SRC html
   <!doctype html>
   <title>Example</title>
   <style>
   #grid {
   display: grid;
   grid-template-rows: 1fr 1fr 1fr;
   grid-template-columns: 1fr 1fr 1fr; // each value represents the size of the row
   grid-gap: 2vw;
  }
  #grid > div {
  font-size: 5vw;
  padding: .5em;
  background: gold;
  text-align: center;
  }
  </style>
  <div id="grid">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>
  <div>8</div>
  <div>9</div>
  </div>
   #+END_SRC
 - =repeat=: function is used for defining how many row or column should be in grid
   e.g
   #+BEGIN_SRC css
   grid-template-column: repeat(4, 1fr);
   #+END_SRC
 - =ASCII art= which we can set grid-item's name
   - This makes it extremely easy to create and modify to our layout
     e.g
     #+BEGIN_SRC css
     grid-template-areas:
     'header header header'
     'nav article ads'
     'footer footer footer';
     #+END_SRC
 - =grid-area= property that allows us to place grid items within a grid
   #+BEGIN_SRC css
   #pageHeader {
   grid-area: header;
   }
   #pageFooter {
   grid-area: footer;
   }
   #+END_SRC

** Responsive grid
- Grid layout provides the =auto-fill= and =auto-fit= keywords
- =auto-fill= sets the columns to a minimum size of 150 pixels and a maximum of the remaining space
- The tracks will repeat as many times as needed to fit into the container
  #+BEGIN_SRC css
  grid-template-columns: repeat(auto-fill, minmax(150px,1fr));
  #+END_SRC
- =auto-fit= works almost the same as =auto-fill= but difference is =auto-fit= collapses any empty tracks

**** Grid with Media Queries
- We can simply rearrange the values in our =ASCII= art and wrap the result in a =media query=
  #+BEGIN_SRC css
  @media all and (max-width: 575px) {
    body {
      grid-template-areas:
        "header"
        "article"
        "ads"
        "nav"
        "footer";
     grid-template-rows: 80px 1fr 70px 1fr 70px;
     grid-template-columns: 1fr;
     }
     }
  #+END_SRC


** Explicit and Implicit Grid
- *Explicit grid*: is the grid that we define with the =grid-template-rows=, =grid-template-columns=
   and =grid-template-areas= properties
- *Implicit grid*: is automatically generated by the grid container whenever grid items are positioned
  outside of the explicit grid
- The grid container generates implicit grid tracks by adding implicit grid lines to the grid
- These lines together with the explicit grid form the implicit grid
- The =grid-template-rows= property only applies to rows on the =explicit grid=
- The row height on the =implicit grid= needs to be set with the =grid-auto-rows= property
- =grid-auto-flow= property allows us to specify whether to use rows or columns for auto-placed items
- The =grid-auto-flow= property also has an optional =dense= keyword
  - that helps to keep grid compact and prevent gaps
  - =dense= could result in item appearing out of order

** Grid Lines
 - Grid lines are the horizontal and vertical dividing lines
 - Each row and column has a grid line on either side of it
 - *Named Grid Lines*: we can also create own name for these lines
 - We can name them with the =grid-template-rows= and =grid-template-column=
   #+BEGIN_SRC css
    #grid {
    display: grid;
    /* Set the tracks and name the lines */
    grid-template-rows: [row1-start] 50px [row2-start] 1fr [row3-start] 80px [row3-end];
    grid-template-columns: [col1-start] 120px [col2-start] 1fr [col3-start] 80px [col3-end];
    grid-gap: 5px;
    height: 90vh;
    }
    ...

    /* Now refer to those named lines */
    #item2 {
    grid-row-start: row3-start;
    grid-column-start: col2-start;
    grid-row-end: row3-end;
    grid-column-end: col3-end;
    }
   #+END_SRC
 - =Named lines= can be either explicit or implicit
 - =implicit named lines= are created when we create named grid areas using the =grid-template-areas=
   #+BEGIN_SRC css
   grid-template-areas: 'header header'
                        '.... content'; /empty cell by using a full stop (.)
   #+END_SRC

** Nested Grid
- Nested grid is when a grid item becomes a grid itself
- To create a nested grid, just apply =display: grid= (or =display: inline-grid=)
- Most grid properties aren't inherited, that means that our nested grid won't inherit the values from parent grid
  - This allows us to make changes to the parent grid without affecting the nested grid
- *Subgrids* value for the display property but browsers don not supports this feature yet
- The content of the =subgrid= affects the size of the parent grid, allowing content to align across both grids

** Alignment properties
 - =align-items= specifies the default =align-self= value for all the grid items participating in the grid container's formatting context
   #+BEGIN_SRC css
   #grid {
   display: grid;
   grid-template-columns: 1fr 1fr 1fr;
   grid-template-rows: 100vh;
   grid-gap: 10px;
   align-items: center;
   background-color: beige;
   }

   #grid > div {
   padding: 20px;
   font-size: 4vw;
   color: white;
   }
   .red {
   background: orangered;
   height: 40%;
   }
   .green {
   background: yellowgreen;
   height: 60%;
   }
   #+END_SRC
 - =align-items= is a default setting and any of grid item could override this with =align-self=
 - =align-self= property aligns a box within its containing block along the block/column/cross axis
 - =justify-items= property specifies the default =justify-self= value
   #+BEGIN_SRC html
   <!doctype html>
   <title>Example</title>
   <style>
   #grid {
   display: grid;
   grid-template-columns: 1fr;
   grid-template-rows: 1fr 1fr 1fr;
   grid-gap: 10px;
   justify-items: center;
   background-color: beige;
   }

   #grid > div {
   padding: 20px;
   font-size: 4vw;
   color: white;
   width: 20%;
   }
   .red {
   background: orangered;
   }
   .green {
   background: yellowgreen;
   }
   .blue {
   background: steelblue;
   }
   </style>

   <div id="grid">
   <div class="red">1</div>
   <div class="green">2</div>
   <div class="blue">3</div>
   </div>
   #+END_SRC
 - =justify-self= property can be used to align an individual grid item along the inline/row/main axis
 - =justify-content= property aligns the grid container's contents as a whole the main/inline axis
 - =align-content= property is the same as =justify-content= except it aligns along the cross/block axis
 - =place-content= property is shorthand for =justify-content= and =align-content=
 - =place-items= property is shorthand for =justify-items= and =align-items=
 - =place-self= property is shorthand for =justify-self= and =align-self=

** Layering grid items
 - =z-index= property is used to layer elements in front or behind each other
   - This is referred to as the 'stack level'
   - Using the z-index property, we can specify the stack level of a box in its current stacking context
   - If we don't specifically reorder and apply z-index to grid items then overlapping items will be ordered based on the raw document order
 - =Raw Document order= if we don not specifically =reorder= or apply =z-index= to any grid item then overlapping items depends on raw document order
   - That order in the source markup
 - =oder= The term order-modified document order refers to the order each grid item has after any ordering operations have been applied
   - We can use the =order= property to reorder the items if required
 - If we combine =z-index= and =order= then it enables to reorder the items without relinquishing control over layering

** Absolute Positioning
- =absolute= positioning can be used grid
  - If we set =position: relative= on grid and =position: absolute= on one of its child then
    any positioning we specify will app within that grid item
  - Absolutely positioned items don't participate in the grid layout, and they don't take up space
  - Therefore, they don't affect the placement of other grid items
  - =auto= value is the default value for the grid-placement properties
